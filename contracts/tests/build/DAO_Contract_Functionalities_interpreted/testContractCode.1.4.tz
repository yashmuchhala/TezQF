parameter (or (or (pair %approve (address %spender) (nat %value)) (pair %mint (address %address) (nat %value))) (or (address %setAdministrator) (or (bool %setPause) (pair %transfer (address %from_) (pair (address %to_) (nat %value))))));
storage   (pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair (bool %paused) (nat %totalSupply)));
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%approve
            # == approve ==
            # sp.verify(~ self.data.paused) # @storage : @parameter%approve
            DUP;        # @storage : @storage : @parameter%approve
            DUG 2;      # @storage : @parameter%approve : @storage
            CDAR;       # bool : @parameter%approve : @storage
            IF
              {
                PUSH string "WrongCondition: ~ self.data.paused"; # string : @parameter%approve : @storage
                FAILWITH;   # FAILED
              }
              {}; # @parameter%approve : @storage
            SWAP;       # @storage : @parameter%approve
            # if ~ (self.data.balances[sp.sender].approvals.contains(params.spender)): # @storage : @parameter%approve
            DUP;        # @storage : @storage : @parameter%approve
            DUG 2;      # @storage : @parameter%approve : @storage
            CADR;       # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
            SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
            GET;        # option (pair (map %approvals address nat) (nat %balance)) : @parameter%approve : @storage
            IF_SOME
              {
                # of_some: Get-item:194 # @some : @parameter%approve : @storage
              }
              {
                PUSH int 194; # int : @parameter%approve : @storage
                FAILWITH;   # FAILED
              }; # @some : @parameter%approve : @storage
            CAR;        # map address nat : @parameter%approve : @storage
            SWAP;       # @parameter%approve : map address nat : @storage
            DUP;        # @parameter%approve : @parameter%approve : map address nat : @storage
            DUG 2;      # @parameter%approve : map address nat : @parameter%approve : @storage
            CAR;        # address : map address nat : @parameter%approve : @storage
            MEM;        # bool : @parameter%approve : @storage
            IF
              {}
              {
                SWAP;       # @storage : @parameter%approve
                # self.data.balances[sp.sender].approvals[params.spender] = 0 # @storage : @parameter%approve
                DUP;        # @storage : @storage : @parameter%approve
                CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%approve
                SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                IF_SOME
                  {}
                  {
                    PUSH int 195; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DUP;        # @some : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CDR;        # nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SWAP;       # @some : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CAR;        # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                DIG 6;      # @parameter%approve : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
                DUP;        # @parameter%approve : @parameter%approve : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
                DUG 7;      # @parameter%approve : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                CAR;        # address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                PUSH (option nat) (Some 0); # option nat : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SWAP;       # address : option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                UPDATE;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                PAIR;       # pair (map address nat) nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                SWAP;       # address : big_map address (pair (map address nat) nat) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%approve
                SWAP;       # @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
              }; # @parameter%approve : @storage
            SWAP;       # @storage : @parameter%approve
            # self.data.balances[sp.sender].approvals[params.spender] += params.value # @storage : @parameter%approve
            DUP;        # @storage : @storage : @parameter%approve
            CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%approve
            SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            SENDER;     # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            IF_SOME
              {}
              {
                PUSH int 198; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                FAILWITH;   # FAILED
              }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DUP;        # @some : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            CDR;        # nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            SWAP;       # @some : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            CAR;        # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DUP;        # map address nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DIG 7;      # @parameter%approve : map address nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
            DUP;        # @parameter%approve : @parameter%approve : map address nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
            DUG 8;      # @parameter%approve : map address nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            CAR;        # address : map address nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DUP;        # address : address : map address nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DUG 2;      # address : map address nat : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            GET;        # option nat : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            IF_SOME
              {}
              {
                PUSH int 198; # int : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
                FAILWITH;   # FAILED
              }; # @some : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            DIG 8;      # @parameter%approve : @some : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
            DUP;        # @parameter%approve : @parameter%approve : @some : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
            DUG 9;      # @parameter%approve : @some : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            CDR;        # nat : @some : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            ADD;        # nat : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            SOME;       # option nat : address : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            SWAP;       # address : option nat : map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            UPDATE;     # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            PAIR;       # pair (map address nat) nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            SWAP;       # address : big_map address (pair (map address nat) nat) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%approve
            PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%approve
            SWAP;       # @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            # sp.transfer(sp.record(address = params.spender, owner = sp.sender, value = params.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, owner = sp.TAddress, value = sp.TNat).layout(("address", ("owner", "value"))), self.data.administrator, entry_point='setApproval').open_some()) # @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            NIL operation; # list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            DIG 2;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%approve
            DUP;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%approve
            DUG 3;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            CAAR;       # address : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            CONTRACT %setApproval (pair (address %address) (pair (address %owner) (nat %value))); # option (contract (pair (address %address) (pair (address %owner) (nat %value)))) : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            IF_SOME
              {}
              {
                PUSH int 208; # int : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                FAILWITH;   # FAILED
              }; # @some : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            PUSH mutez 0; # mutez : @some : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            DIG 3;      # @parameter%approve : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            DUP;        # @parameter%approve : @parameter%approve : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            DUG 4;      # @parameter%approve : mutez : @some : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            CDR;        # nat : mutez : @some : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            SENDER;     # address : nat : mutez : @some : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            PAIR %owner %value; # pair (address %owner) (nat %value) : mutez : @some : list operation : @parameter%approve : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            DIG 4;      # @parameter%approve : pair (address %owner) (nat %value) : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            CAR;        # address : pair (address %owner) (nat %value) : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            PAIR %address; # pair (address %address) (pair (address %owner) (nat %value)) : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            TRANSFER_TOKENS; # operation : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
            CONS;       # list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
          }
          {
            SWAP;       # @storage : @parameter%mint
            # == mint ==
            # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%mint
            DUP;        # @storage : @storage : @parameter%mint
            DUG 2;      # @storage : @parameter%mint : @storage
            CAAR;       # address : @parameter%mint : @storage
            SENDER;     # address : address : @parameter%mint : @storage
            COMPARE;    # int : @parameter%mint : @storage
            EQ;         # bool : @parameter%mint : @storage
            IF
              {}
              {
                PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%mint : @storage
                FAILWITH;   # FAILED
              }; # @parameter%mint : @storage
            SWAP;       # @storage : @parameter%mint
            # if ~ (self.data.balances.contains(params.address)): # @storage : @parameter%mint
            DUP;        # @storage : @storage : @parameter%mint
            DUG 2;      # @storage : @parameter%mint : @storage
            CADR;       # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
            SWAP;       # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
            DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
            DUG 2;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
            CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%mint : @storage
            MEM;        # bool : @parameter%mint : @storage
            IF
              {}
              {
                SWAP;       # @storage : @parameter%mint
                # self.data.balances[params.address] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%mint
                DUP;        # @storage : @storage : @parameter%mint
                CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%mint
                SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                DIG 3;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
                DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
                DUG 4;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                SWAP;       # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                SWAP;       # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                PAIR;       # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                PAIR;       # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
                SWAP;       # @parameter%mint : pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (bool %paused) (nat %totalSupply))
              }; # @parameter%mint : @storage
            SWAP;       # @storage : @parameter%mint
            # self.data.balances[params.address].balance += params.value # @storage : @parameter%mint
            DUP;        # @storage : @storage : @parameter%mint
            CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%mint
            SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            DIG 4;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
            DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
            DUG 5;      # @parameter%mint : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            IF_SOME
              {}
              {
                PUSH int 312; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
                FAILWITH;   # FAILED
              }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            DUP;        # @some : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            CAR;        # map address nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            SWAP;       # @some : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            CDR;        # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            DIG 6;      # @parameter%mint : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
            DUP;        # @parameter%mint : @parameter%mint : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
            DUG 7;      # @parameter%mint : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            ADD;        # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            SWAP;       # map address nat : nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            PAIR;       # pair (map address nat) nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            SWAP;       # address : big_map address (pair (map address nat) nat) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%mint
            PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
            # self.data.totalSupply += params.value # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
            DUP;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
            CAR;        # pair address (big_map address (pair (map address nat) nat)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%mint
            SWAP;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            CDR;        # pair (bool %paused) (nat %totalSupply) : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            DUP;        # pair (bool %paused) (nat %totalSupply) : pair (bool %paused) (nat %totalSupply) : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            CAR;        # bool : pair (bool %paused) (nat %totalSupply) : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            SWAP;       # pair (bool %paused) (nat %totalSupply) : bool : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            CDR;        # nat : bool : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            DIG 3;      # @parameter%mint : nat : bool : pair address (big_map address (pair (map address nat) nat))
            DUP;        # @parameter%mint : @parameter%mint : nat : bool : pair address (big_map address (pair (map address nat) nat))
            DUG 4;      # @parameter%mint : nat : bool : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            CDR;        # nat : nat : bool : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            ADD;        # nat : bool : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            SWAP;       # bool : nat : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            PAIR;       # pair bool nat : pair address (big_map address (pair (map address nat) nat)) : @parameter%mint
            SWAP;       # pair address (big_map address (pair (map address nat) nat)) : pair bool nat : @parameter%mint
            PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat) : @parameter%mint
            SWAP;       # @parameter%mint : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            # sp.transfer(sp.record(address = params.address, value = params.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.administrator, entry_point='addTokens').open_some()) # @parameter%mint : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            NIL operation; # list operation : @parameter%mint : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            DIG 2;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat) : list operation : @parameter%mint
            DUP;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat) : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat) : list operation : @parameter%mint
            DUG 3;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat) : list operation : @parameter%mint : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            CAAR;       # address : list operation : @parameter%mint : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            CONTRACT %addTokens (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : @parameter%mint : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            IF_SOME
              {}
              {
                PUSH int 322; # int : list operation : @parameter%mint : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
                FAILWITH;   # FAILED
              }; # @some : list operation : @parameter%mint : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            PUSH mutez 0; # mutez : @some : list operation : @parameter%mint : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            DIG 3;      # @parameter%mint : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            DUP;        # @parameter%mint : @parameter%mint : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            CDR;        # nat : @parameter%mint : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            SWAP;       # @parameter%mint : nat : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            CAR;        # address : nat : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            TRANSFER_TOKENS; # operation : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
            CONS;       # list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair bool nat)
          }; # list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
      }
      {
        IF_LEFT
          {
            SWAP;       # @storage : @parameter%setAdministrator
            # == setAdministrator ==
            # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%setAdministrator
            DUP;        # @storage : @storage : @parameter%setAdministrator
            DUG 2;      # @storage : @parameter%setAdministrator : @storage
            CAAR;       # address : @parameter%setAdministrator : @storage
            SENDER;     # address : address : @parameter%setAdministrator : @storage
            COMPARE;    # int : @parameter%setAdministrator : @storage
            EQ;         # bool : @parameter%setAdministrator : @storage
            IF
              {}
              {
                PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setAdministrator : @storage
                FAILWITH;   # FAILED
              }; # @parameter%setAdministrator : @storage
            SWAP;       # @storage : @parameter%setAdministrator
            # self.data.administrator = params.newAdmin # @storage : @parameter%setAdministrator
            DUP;        # @storage : @storage : @parameter%setAdministrator
            CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%setAdministrator
            SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%setAdministrator
            CADR;       # big_map address (pair (map %approvals address nat) (nat %balance)) : pair (bool %paused) (nat %totalSupply) : @parameter%setAdministrator
            DIG 2;      # @parameter%setAdministrator : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (bool %paused) (nat %totalSupply)
            PAIR;       # pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply)
            PAIR;       # pair (pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (bool %paused) (nat %totalSupply))
            NIL operation; # list operation : pair (pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (bool %paused) (nat %totalSupply))
          }
          {
            IF_LEFT
              {
                SWAP;       # @storage : @parameter%setPause
                # == setPause ==
                # sp.verify(sp.sender == self.data.administrator) # @storage : @parameter%setPause
                DUP;        # @storage : @storage : @parameter%setPause
                DUG 2;      # @storage : @parameter%setPause : @storage
                CAAR;       # address : @parameter%setPause : @storage
                SENDER;     # address : address : @parameter%setPause : @storage
                COMPARE;    # int : @parameter%setPause : @storage
                EQ;         # bool : @parameter%setPause : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setPause : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%setPause : @storage
                SWAP;       # @storage : @parameter%setPause
                # self.data.paused = params.pause # @storage : @parameter%setPause
                DUP;        # @storage : @storage : @parameter%setPause
                CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @storage : @parameter%setPause
                SWAP;       # @storage : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%setPause
                CDDR;       # nat : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : @parameter%setPause
                DIG 2;      # @parameter%setPause : nat : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))
                PAIR;       # pair @parameter%setPause nat : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))
                SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair @parameter%setPause nat
                PAIR;       # pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair @parameter%setPause nat)
                NIL operation; # list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair @parameter%setPause nat)
              }
              {
                SWAP;       # @storage : @parameter%transfer
                # == transfer ==
                # sp.verify((~ self.data.paused) & ((params.from_ == sp.sender) | ((self.data.balances[params.from_].approvals.contains(sp.sender)) & (self.data.balances[params.from_].approvals[sp.sender] >= params.value)))) # @storage : @parameter%transfer
                DUP;        # @storage : @storage : @parameter%transfer
                DUG 2;      # @storage : @parameter%transfer : @storage
                CDAR;       # bool : @parameter%transfer : @storage
                IF
                  {
                    PUSH bool False; # bool : @parameter%transfer : @storage
                  }
                  {
                    DUP;        # @parameter%transfer : @parameter%transfer : @storage
                    CAR;        # address : @parameter%transfer : @storage
                    SENDER;     # address : address : @parameter%transfer : @storage
                    COMPARE;    # int : @parameter%transfer : @storage
                    EQ;         # bool : @parameter%transfer : @storage
                    IF
                      {
                        PUSH bool True; # bool : @parameter%transfer : @storage
                      }
                      {
                        SWAP;       # @storage : @parameter%transfer
                        DUP;        # @storage : @storage : @parameter%transfer
                        DUG 2;      # @storage : @parameter%transfer : @storage
                        CADR;       # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        SWAP;       # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                        DUG 2;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        GET;        # option (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                        IF_SOME
                          {
                            # of_some: Get-item:86 # @some : @parameter%transfer : @storage
                          }
                          {
                            PUSH int 86; # int : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }; # @some : @parameter%transfer : @storage
                        CAR;        # map address nat : @parameter%transfer : @storage
                        SENDER;     # address : map address nat : @parameter%transfer : @storage
                        MEM;        # bool : @parameter%transfer : @storage
                        IF
                          {
                            DUP;        # @parameter%transfer : @parameter%transfer : @storage
                            CDDR;       # nat : @parameter%transfer : @storage
                            DIG 2;      # @storage : nat : @parameter%transfer
                            DUP;        # @storage : @storage : nat : @parameter%transfer
                            DUG 3;      # @storage : nat : @parameter%transfer : @storage
                            CADR;       # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                            DIG 2;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @storage
                            DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @storage
                            DUG 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                            CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                            GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:87 # @some : nat : @parameter%transfer : @storage
                              }
                              {
                                PUSH int 87; # int : nat : @parameter%transfer : @storage
                                FAILWITH;   # FAILED
                              }; # @some : nat : @parameter%transfer : @storage
                            CAR;        # map address nat : nat : @parameter%transfer : @storage
                            SENDER;     # address : map address nat : nat : @parameter%transfer : @storage
                            GET;        # option nat : nat : @parameter%transfer : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:87 # @some : nat : @parameter%transfer : @storage
                              }
                              {
                                PUSH int 87; # int : nat : @parameter%transfer : @storage
                                FAILWITH;   # FAILED
                              }; # @some : nat : @parameter%transfer : @storage
                            COMPARE;    # int : @parameter%transfer : @storage
                            GE;         # bool : @parameter%transfer : @storage
                          }
                          {
                            PUSH bool False; # bool : @parameter%transfer : @storage
                          }; # bool : @parameter%transfer : @storage
                      }; # bool : @parameter%transfer : @storage
                  }; # bool : @parameter%transfer : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: (~ self.data.paused) & ((params.from_ == sp.sender) | ((self.data.balances[params.from_].approvals.contains(sp.sender)) & (self.data.balances[params.from_].approvals[sp.sender] >= params.value)))"; # string : @parameter%transfer : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%transfer : @storage
                SWAP;       # @storage : @parameter%transfer
                # if ~ (self.data.balances.contains(params.to_)): # @storage : @parameter%transfer
                DUP;        # @storage : @storage : @parameter%transfer
                DUG 2;      # @storage : @parameter%transfer : @storage
                CADR;       # big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                SWAP;       # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @storage
                DUG 2;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                CDAR;       # address : big_map address (pair (map %approvals address nat) (nat %balance)) : @parameter%transfer : @storage
                MEM;        # bool : @parameter%transfer : @storage
                IF
                  {}
                  {
                    SWAP;       # @storage : @parameter%transfer
                    # self.data.balances[params.to_] = sp.record(approvals = {}, balance = 0) # @storage : @parameter%transfer
                    DUP;        # @storage : @storage : @parameter%transfer
                    CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%transfer
                    SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    DIG 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
                    DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
                    DUG 4;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    CDAR;       # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    PUSH (option (pair (map %approvals address nat) (nat %balance))) (Some (Pair {} 0)); # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SWAP;       # address : option (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    UPDATE;     # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SWAP;       # address : big_map address (pair (map %approvals address nat) (nat %balance)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    PAIR;       # pair address (big_map address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    PAIR;       # pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                    SWAP;       # @parameter%transfer : pair (pair address (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (bool %paused) (nat %totalSupply))
                  }; # @parameter%transfer : @storage
                # sp.verify(self.data.balances[params.from_].balance >= params.value) # @parameter%transfer : @storage
                DUP;        # @parameter%transfer : @parameter%transfer : @storage
                CDDR;       # nat : @parameter%transfer : @storage
                DIG 2;      # @storage : nat : @parameter%transfer
                DUP;        # @storage : @storage : nat : @parameter%transfer
                DUG 3;      # @storage : nat : @parameter%transfer : @storage
                CADR;       # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                DIG 2;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @storage
                DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @storage
                DUG 3;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : @parameter%transfer : @storage
                IF_SOME
                  {
                    # of_some: Get-item:97 # @some : nat : @parameter%transfer : @storage
                  }
                  {
                    PUSH int 97; # int : nat : @parameter%transfer : @storage
                    FAILWITH;   # FAILED
                  }; # @some : nat : @parameter%transfer : @storage
                CDR;        # nat : nat : @parameter%transfer : @storage
                COMPARE;    # int : @parameter%transfer : @storage
                GE;         # bool : @parameter%transfer : @storage
                IF
                  {}
                  {
                    PUSH string "WrongCondition: self.data.balances[params.from_].balance >= params.value"; # string : @parameter%transfer : @storage
                    FAILWITH;   # FAILED
                  }; # @parameter%transfer : @storage
                SWAP;       # @storage : @parameter%transfer
                # self.data.balances[params.from_].balance = sp.as_nat(self.data.balances[params.from_].balance - params.value) # @storage : @parameter%transfer
                DUP;        # @storage : @storage : @parameter%transfer
                DUG 2;      # @storage : @parameter%transfer : @storage
                DUP;        # @storage : @storage : @parameter%transfer : @storage
                CDR;        # pair (bool %paused) (nat %totalSupply) : @storage : @parameter%transfer : @storage
                SWAP;       # @storage : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                CAR;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                DUP;        # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                CAR;        # address : pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                SWAP;       # pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance))) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                CDR;        # big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                DUP;        # big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                DIG 4;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @storage
                DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @storage
                DUG 5;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                DUP;        # address : address : big_map address (pair (map %approvals address nat) (nat %balance)) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                DUG 2;      # address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                GET;        # option (pair (map %approvals address nat) (nat %balance)) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                IF_SOME
                  {}
                  {
                    PUSH int 101; # int : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                CAR;        # map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                DIG 5;      # @parameter%transfer : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @storage
                DUP;        # @parameter%transfer : @parameter%transfer : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @storage
                DUG 6;      # @parameter%transfer : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                CDDR;       # nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : @storage
                DIG 7;      # @storage : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CADR;       # big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                DIG 7;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
                DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply)
                DUG 8;      # @parameter%transfer : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CAR;        # address : big_map address (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                GET;        # option (pair (map %approvals address nat) (nat %balance)) : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                IF_SOME
                  {
                    # of_some: Get-item:102 # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                  }
                  {
                    PUSH int 102; # int : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    FAILWITH;   # FAILED
                  }; # @some : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CDR;        # nat : nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SUB;        # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                ISNAT;      # option nat : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                IF_SOME
                  {}
                  {
                    PUSH int 101; # int : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    FAILWITH;   # FAILED
                  }; # @some : map address nat : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SWAP;       # map address nat : @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                PAIR;       # pair (map address nat) @some : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SOME;       # option (pair (map address nat) @some) : address : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SWAP;       # address : option (pair (map address nat) @some) : big_map address (pair (map %approvals address nat) (nat %balance)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SWAP;       # address : big_map address (pair (map address nat) nat) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                # self.data.balances[params.to_].balance += params.value # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                DUP;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                CDR;        # pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                SWAP;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CAR;        # pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                DUP;        # pair address (big_map address (pair (map address nat) nat)) : pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CAR;        # address : pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SWAP;       # pair address (big_map address (pair (map address nat) nat)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CDR;        # big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                DIG 4;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply)
                DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply)
                DUG 5;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CDAR;       # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                IF_SOME
                  {}
                  {
                    PUSH int 104; # int : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    FAILWITH;   # FAILED
                  }; # @some : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CAR;        # map address nat : @some : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SWAP;       # @some : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CDR;        # nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                DIG 6;      # @parameter%transfer : nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply)
                DUP;        # @parameter%transfer : @parameter%transfer : nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply)
                DUG 7;      # @parameter%transfer : nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                CDDR;       # nat : nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                ADD;        # nat : map address nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SWAP;       # map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                PAIR;       # pair (map address nat) nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                SWAP;       # address : big_map address (pair (map address nat) nat) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                SWAP;       # @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                # if params.from_ != sp.sender: # @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                DUP;        # @parameter%transfer : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CAR;        # address : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                SENDER;     # address : address : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                COMPARE;    # int : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                NEQ;        # bool : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                IF
                  {
                    SWAP;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                    # self.data.balances[params.from_].approvals[sp.sender] = sp.as_nat(self.data.balances[params.from_].approvals[sp.sender] - params.value) # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                    DUP;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                    DUG 2;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUP;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CDR;        # pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    SWAP;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CAR;        # pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUP;        # pair address (big_map address (pair (map address nat) nat)) : pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CAR;        # address : pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    SWAP;       # pair address (big_map address (pair (map address nat) nat)) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CDR;        # big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUP;        # big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DIG 4;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUG 5;      # @parameter%transfer : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CAR;        # address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUP;        # address : address : big_map address (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUG 2;      # address : big_map address (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    GET;        # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    IF_SOME
                      {}
                      {
                        PUSH int 108; # int : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUP;        # @some : @some : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CDR;        # nat : @some : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    SWAP;       # @some : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CAR;        # map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    SENDER;     # address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DIG 7;      # @parameter%transfer : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUP;        # @parameter%transfer : @parameter%transfer : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUG 8;      # @parameter%transfer : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CDDR;       # nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DIG 9;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    CADR;       # big_map address (pair (map address nat) nat) : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    DIG 9;      # @parameter%transfer : big_map address (pair (map address nat) nat) : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply)
                    DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (map address nat) nat) : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply)
                    DUG 10;     # @parameter%transfer : big_map address (pair (map address nat) nat) : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    CAR;        # address : big_map address (pair (map address nat) nat) : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    GET;        # option (pair (map address nat) nat) : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    IF_SOME
                      {
                        # of_some: Get-item:109 # @some : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                      }
                      {
                        PUSH int 109; # int : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                        FAILWITH;   # FAILED
                      }; # @some : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    CAR;        # map address nat : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SENDER;     # address : map address nat : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    GET;        # option nat : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    IF_SOME
                      {
                        # of_some: Get-item:109 # @some : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                      }
                      {
                        PUSH int 109; # int : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                        FAILWITH;   # FAILED
                      }; # @some : nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SUB;        # int : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    ISNAT;      # option nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    IF_SOME
                      {}
                      {
                        PUSH int 108; # int : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                        FAILWITH;   # FAILED
                      }; # @some : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SOME;       # option nat : address : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SWAP;       # address : option nat : map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    UPDATE;     # map address nat : nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    PAIR;       # pair (map address nat) nat : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SOME;       # option (pair (map address nat) nat) : address : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SWAP;       # address : option (pair (map address nat) nat) : big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    UPDATE;     # big_map address (pair (map address nat) nat) : address : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    SWAP;       # address : big_map address (pair (map address nat) nat) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    PAIR;       # pair address (big_map address (pair (map address nat) nat)) : pair (bool %paused) (nat %totalSupply) : @parameter%transfer
                    PAIR;       # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : @parameter%transfer
                    SWAP;       # @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    # sp.transfer(sp.record(address = sp.sender, owner = params.from_, value = params.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, owner = sp.TAddress, value = sp.TNat).layout(("address", ("owner", "value"))), self.data.administrator, entry_point='decreaseApproval').open_some()) # @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    NIL operation; # list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DIG 2;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%transfer
                    DUP;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%transfer
                    DUG 3;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CAAR;       # address : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CONTRACT %decreaseApproval (pair (address %address) (pair (address %owner) (nat %value))); # option (contract (pair (address %address) (pair (address %owner) (nat %value)))) : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    IF_SOME
                      {}
                      {
                        PUSH int 118; # int : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DIG 3;      # @parameter%transfer : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUP;        # @parameter%transfer : @parameter%transfer : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CDDR;       # nat : @parameter%transfer : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    SWAP;       # @parameter%transfer : nat : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUP;        # @parameter%transfer : @parameter%transfer : nat : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    DUG 5;      # @parameter%transfer : nat : mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CAR;        # address : nat : mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    PAIR %owner %value; # pair (address %owner) (nat %value) : mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    SENDER;     # address : pair (address %owner) (nat %value) : mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    PAIR %address; # pair (address %address) (pair (address %owner) (nat %value)) : mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    TRANSFER_TOKENS; # operation : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    CONS;       # list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                  }
                  {
                    NIL operation; # list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                  }; # list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                # sp.transfer(sp.record(address = params.from_, value = params.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.administrator, entry_point='removeTokens').open_some()) # list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                DIG 2;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%transfer
                DUP;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%transfer
                DUG 3;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CAAR;       # address : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CONTRACT %removeTokens (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                IF_SOME
                  {}
                  {
                    PUSH int 136; # int : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                DIG 3;      # @parameter%transfer : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                DUP;        # @parameter%transfer : @parameter%transfer : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CDDR;       # nat : @parameter%transfer : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                SWAP;       # @parameter%transfer : nat : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                DUP;        # @parameter%transfer : @parameter%transfer : nat : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                DUG 5;      # @parameter%transfer : nat : mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CAR;        # address : nat : mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                TRANSFER_TOKENS; # operation : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CONS;       # list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                # sp.transfer(sp.record(address = params.to_, value = params.value), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.administrator, entry_point='addTokens').open_some()) # list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                DIG 2;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%transfer
                DUP;        # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%transfer
                DUG 3;      # pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)) : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CAAR;       # address : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CONTRACT %addTokens (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                IF_SOME
                  {}
                  {
                    PUSH int 151; # int : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                    FAILWITH;   # FAILED
                  }; # @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                PUSH mutez 0; # mutez : @some : list operation : @parameter%transfer : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                DIG 3;      # @parameter%transfer : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                DUP;        # @parameter%transfer : @parameter%transfer : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CDDR;       # nat : @parameter%transfer : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                SWAP;       # @parameter%transfer : nat : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CDAR;       # address : nat : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                TRANSFER_TOKENS; # operation : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
                CONS;       # list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
              }; # list operation : pair (pair (address %administrator) (big_map %balances address (pair (map %approvals address nat) (nat %balance)))) (pair @parameter%setPause nat)
          }; # list operation : pair (pair @parameter%setAdministrator (big_map address (pair (map %approvals address nat) (nat %balance)))) (pair (bool %paused) (nat %totalSupply))
      }; # list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
    NIL operation; # list operation : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
    SWAP;       # list operation : list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
    ITER
      {
        CONS;       # list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
      }; # list operation : pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply))
    PAIR;       # pair (list operation) (pair (pair address (big_map address (pair (map address nat) nat))) (pair (bool %paused) (nat %totalSupply)))
  };