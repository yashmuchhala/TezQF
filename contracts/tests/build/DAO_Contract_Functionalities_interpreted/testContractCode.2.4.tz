parameter (or (nat %buyTokens) (address %setTokenContract));
storage   (pair (pair (address %admin) (address %daoMultiSig)) (pair (nat %price) (option %token address)));
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    IF_LEFT
      {
        SWAP;       # @storage : @parameter%buyTokens
        # == buyTokens ==
        # sp.verify(self.data.token.is_some()) # @storage : @parameter%buyTokens
        DUP;        # @storage : @storage : @parameter%buyTokens
        DUG 2;      # @storage : @parameter%buyTokens : @storage
        CDDR;       # option address : @parameter%buyTokens : @storage
        IF_SOME
          {
            DROP;       # @parameter%buyTokens : @storage
          }
          {
            PUSH string "WrongCondition: self.data.token.is_some()"; # string : @parameter%buyTokens : @storage
            FAILWITH;   # FAILED
          }; # @parameter%buyTokens : @storage
        SWAP;       # @storage : @parameter%buyTokens
        # sp.verify(sp.sender != self.data.daoMultiSig) # @storage : @parameter%buyTokens
        DUP;        # @storage : @storage : @parameter%buyTokens
        DUG 2;      # @storage : @parameter%buyTokens : @storage
        CADR;       # address : @parameter%buyTokens : @storage
        SENDER;     # address : address : @parameter%buyTokens : @storage
        COMPARE;    # int : @parameter%buyTokens : @storage
        NEQ;        # bool : @parameter%buyTokens : @storage
        IF
          {}
          {
            PUSH string "WrongCondition: sp.sender != self.data.daoMultiSig"; # string : @parameter%buyTokens : @storage
            FAILWITH;   # FAILED
          }; # @parameter%buyTokens : @storage
        # sp.verify(sp.mutez(params * self.data.price) == sp.amount) # @parameter%buyTokens : @storage
        AMOUNT;     # mutez : @parameter%buyTokens : @storage
        PUSH mutez 1; # mutez : mutez : @parameter%buyTokens : @storage
        DIG 3;      # @storage : mutez : mutez : @parameter%buyTokens
        DUP;        # @storage : @storage : mutez : mutez : @parameter%buyTokens
        DUG 4;      # @storage : mutez : mutez : @parameter%buyTokens : @storage
        CDAR;       # nat : mutez : mutez : @parameter%buyTokens : @storage
        DIG 3;      # @parameter%buyTokens : nat : mutez : mutez : @storage
        DUP;        # @parameter%buyTokens : @parameter%buyTokens : nat : mutez : mutez : @storage
        DUG 4;      # @parameter%buyTokens : nat : mutez : mutez : @parameter%buyTokens : @storage
        MUL;        # nat : mutez : mutez : @parameter%buyTokens : @storage
        MUL;        # mutez : mutez : @parameter%buyTokens : @storage
        COMPARE;    # int : @parameter%buyTokens : @storage
        EQ;         # bool : @parameter%buyTokens : @storage
        IF
          {}
          {
            PUSH string "WrongCondition: sp.mutez(params * self.data.price) == sp.amount"; # string : @parameter%buyTokens : @storage
            FAILWITH;   # FAILED
          }; # @parameter%buyTokens : @storage
        # sp.transfer(sp.record(address = sp.sender, value = params), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.token.open_some(), entry_point='mint').open_some()) # @parameter%buyTokens : @storage
        NIL operation; # list operation : @parameter%buyTokens : @storage
        DIG 2;      # @storage : list operation : @parameter%buyTokens
        DUP;        # @storage : @storage : list operation : @parameter%buyTokens
        DUG 3;      # @storage : list operation : @parameter%buyTokens : @storage
        CDDR;       # option address : list operation : @parameter%buyTokens : @storage
        IF_SOME
          {}
          {
            PUSH int 368; # int : list operation : @parameter%buyTokens : @storage
            FAILWITH;   # FAILED
          }; # @some : list operation : @parameter%buyTokens : @storage
        CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : @parameter%buyTokens : @storage
        IF_SOME
          {}
          {
            PUSH int 367; # int : list operation : @parameter%buyTokens : @storage
            FAILWITH;   # FAILED
          }; # @some : list operation : @parameter%buyTokens : @storage
        PUSH mutez 0; # mutez : @some : list operation : @parameter%buyTokens : @storage
        DIG 3;      # @parameter%buyTokens : mutez : @some : list operation : @storage
        DUP;        # @parameter%buyTokens : @parameter%buyTokens : mutez : @some : list operation : @storage
        DUG 4;      # @parameter%buyTokens : mutez : @some : list operation : @parameter%buyTokens : @storage
        SENDER;     # address : @parameter%buyTokens : mutez : @some : list operation : @parameter%buyTokens : @storage
        PAIR %address %value; # pair (address %address) (@parameter%buyTokens %value) : mutez : @some : list operation : @parameter%buyTokens : @storage
        TRANSFER_TOKENS; # operation : list operation : @parameter%buyTokens : @storage
        CONS;       # list operation : @parameter%buyTokens : @storage
        # sp.transfer(sp.record(address = self.data.daoMultiSig, value = params // 10), sp.tez(0), sp.contract(sp.TRecord(address = sp.TAddress, value = sp.TNat).layout(("address", "value")), self.data.token.open_some(), entry_point='mint').open_some()) # list operation : @parameter%buyTokens : @storage
        DIG 2;      # @storage : list operation : @parameter%buyTokens
        DUP;        # @storage : @storage : list operation : @parameter%buyTokens
        DUG 3;      # @storage : list operation : @parameter%buyTokens : @storage
        CDDR;       # option address : list operation : @parameter%buyTokens : @storage
        IF_SOME
          {}
          {
            PUSH int 368; # int : list operation : @parameter%buyTokens : @storage
            FAILWITH;   # FAILED
          }; # @some : list operation : @parameter%buyTokens : @storage
        CONTRACT %mint (pair (address %address) (nat %value)); # option (contract (pair (address %address) (nat %value))) : list operation : @parameter%buyTokens : @storage
        IF_SOME
          {}
          {
            PUSH int 367; # int : list operation : @parameter%buyTokens : @storage
            FAILWITH;   # FAILED
          }; # @some : list operation : @parameter%buyTokens : @storage
        PUSH mutez 0; # mutez : @some : list operation : @parameter%buyTokens : @storage
        PUSH nat 10; # nat : mutez : @some : list operation : @parameter%buyTokens : @storage
        DIG 4;      # @parameter%buyTokens : nat : mutez : @some : list operation : @storage
        EDIV;       # option (pair nat nat) : mutez : @some : list operation : @storage
        IF_SOME
          {
            CAR;        # nat : mutez : @some : list operation : @storage
          }
          {
            PUSH int 377; # int : mutez : @some : list operation : @storage
            FAILWITH;   # FAILED
          }; # nat : mutez : @some : list operation : @storage
        DIG 4;      # @storage : nat : mutez : @some : list operation
        DUP;        # @storage : @storage : nat : mutez : @some : list operation
        DUG 5;      # @storage : nat : mutez : @some : list operation : @storage
        CADR;       # address : nat : mutez : @some : list operation : @storage
        PAIR %address %value; # pair (address %address) (nat %value) : mutez : @some : list operation : @storage
        TRANSFER_TOKENS; # operation : list operation : @storage
        CONS;       # list operation : @storage
      }
      {
        SWAP;       # @storage : @parameter%setTokenContract
        # == setTokenContract ==
        # sp.verify(~ self.data.token.is_some()) # @storage : @parameter%setTokenContract
        DUP;        # @storage : @storage : @parameter%setTokenContract
        DUG 2;      # @storage : @parameter%setTokenContract : @storage
        CDDR;       # option address : @parameter%setTokenContract : @storage
        IF_SOME
          {
            PUSH string "WrongCondition: ~ self.data.token.is_some()"; # string : @some : @parameter%setTokenContract : @storage
            FAILWITH;   # FAILED
          }
          {}; # @parameter%setTokenContract : @storage
        SWAP;       # @storage : @parameter%setTokenContract
        # sp.verify(sp.sender == self.data.admin) # @storage : @parameter%setTokenContract
        DUP;        # @storage : @storage : @parameter%setTokenContract
        DUG 2;      # @storage : @parameter%setTokenContract : @storage
        CAAR;       # address : @parameter%setTokenContract : @storage
        SENDER;     # address : address : @parameter%setTokenContract : @storage
        COMPARE;    # int : @parameter%setTokenContract : @storage
        EQ;         # bool : @parameter%setTokenContract : @storage
        IF
          {}
          {
            PUSH string "WrongCondition: sp.sender == self.data.admin"; # string : @parameter%setTokenContract : @storage
            FAILWITH;   # FAILED
          }; # @parameter%setTokenContract : @storage
        SWAP;       # @storage : @parameter%setTokenContract
        # self.data.token = sp.some(params) # @storage : @parameter%setTokenContract
        DUP;        # @storage : @storage : @parameter%setTokenContract
        CAR;        # pair (address %admin) (address %daoMultiSig) : @storage : @parameter%setTokenContract
        SWAP;       # @storage : pair (address %admin) (address %daoMultiSig) : @parameter%setTokenContract
        CDAR;       # nat : pair (address %admin) (address %daoMultiSig) : @parameter%setTokenContract
        DIG 2;      # @parameter%setTokenContract : nat : pair (address %admin) (address %daoMultiSig)
        SOME;       # option address : nat : pair (address %admin) (address %daoMultiSig)
        SWAP;       # nat : option address : pair (address %admin) (address %daoMultiSig)
        PAIR;       # pair nat (option address) : pair (address %admin) (address %daoMultiSig)
        SWAP;       # pair (address %admin) (address %daoMultiSig) : pair nat (option address)
        PAIR;       # pair (pair (address %admin) (address %daoMultiSig)) (pair nat (option address))
        NIL operation; # list operation : pair (pair (address %admin) (address %daoMultiSig)) (pair nat (option address))
      }; # list operation : @storage
    NIL operation; # list operation : list operation : @storage
    SWAP;       # list operation : list operation : @storage
    ITER
      {
        CONS;       # list operation : @storage
      }; # list operation : @storage
    PAIR;       # pair (list operation) @storage
  };